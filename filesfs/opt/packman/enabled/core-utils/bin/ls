#!/usr/bin/env python3
import os
import sys
import time
from pathlib import Path
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.live import Live
from rich.spinner import Spinner
from rich.progress import Progress, SpinnerColumn, BarColumn, TextColumn

console = Console()

def get_file_info(path):
    stat = path.stat()
    size = stat.st_size
    mtime = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(stat.st_mtime))
    mode = oct(stat.st_mode)[-3:]
    return {
        'size': size,
        'mtime': mtime,
        'mode': mode
    }

def format_size(size):
    for unit in ['B', 'K', 'M', 'G', 'T']:
        if size < 1024:
            return f"{size:.1f}{unit}"
        size /= 1024
    return f"{size:.1f}P"

def get_color(path):
    if path.is_dir():
        return "blue"
    elif path.is_symlink():
        return "cyan"
    elif path.suffix in ['.py', '.sh', '.txt', '.md']:
        return "green"
    elif path.suffix in ['.jpg', '.png', '.gif']:
        return "magenta"
    elif path.suffix in ['.zip', '.tar', '.gz']:
        return "red"
    else:
        return "white"

def main():
    root = Path(os.environ.get('MASHFS_ROOT', 'filesfs')).absolute()
    current_dir = Path(os.environ.get('MASHFS_CWD', str(root))).absolute()
    
    if len(sys.argv) > 1:
        target = sys.argv[1]
        if target.startswith('/'):
            path = root / target[1:]
        else:
            path = current_dir / target
    else:
        path = current_dir
        
    try:
        if not str(path.resolve()).startswith(str(root)):
            print(f"ls: access denied: {sys.argv[1] if len(sys.argv) > 1 else ''}")
            return
            
        if not path.is_dir():
            print(f"ls: not a directory: {sys.argv[1] if len(sys.argv) > 1 else ''}")
            return
            
        items = list(path.iterdir())
        items.sort(key=lambda x: (not x.is_dir(), x.name.lower()))
        
        table = Table(show_header=False, box=None)
        for item in items:
            if item.is_dir():
                table.add_row(f"[blue]{item.name}/[/blue]")
            else:
                table.add_row(item.name)
                
        console.print(table)
    except Exception as e:
        print(f"ls: {e}")

if __name__ == "__main__":
    main() 