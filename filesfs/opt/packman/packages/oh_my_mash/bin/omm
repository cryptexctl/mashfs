#!/usr/bin/env python3
import os
import sys
import random
import time
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.live import Live
from rich.spinner import Spinner
from rich.progress import Progress, SpinnerColumn, BarColumn, TextColumn
from rich.text import Text
from rich.layout import Layout
from rich.align import Align
from rich.style import Style
from rich.color import Color
from pyfiglet import Figlet
import colorama
from colorama import Fore, Back, Style as ColoramaStyle

colorama.init()
console = Console()

class OhMyMash:
    def __init__(self):
        self.root = Path(os.environ.get('MASHFS_ROOT', 'filesfs')).absolute()
        self.themes_dir = self.root / 'opt' / 'packman' / 'packages' / 'oh_my_mash' / 'themes'
        self.current_theme = self._load_current_theme()
        
    def _load_current_theme(self):
        theme_file = self.root / 'etc' / 'omm' / 'current_theme'
        if theme_file.exists():
            return theme_file.read_text().strip()
        return 'cyberpunk'
        
    def _save_current_theme(self, theme_name):
        theme_file = self.root / 'etc' / 'omm' / 'current_theme'
        theme_file.parent.mkdir(parents=True, exist_ok=True)
        theme_file.write_text(theme_name)
        
    def _get_theme_colors(self, theme_name):
        theme_file = self.themes_dir / f"{theme_name}.theme"
        if not theme_file.exists():
            return None
            
        colors = {}
        with open(theme_file) as f:
            for line in f:
                if '=' in line:
                    key, value = line.strip().split('=')
                    colors[key.strip()] = value.strip()
        return colors
        
    def _generate_ascii_art(self, text):
        f = Figlet(font='slant')
        return f.renderText(text)
        
    def _animate_text(self, text, color, delay=0.1):
        for char in text:
            console.print(f"[{color}]{char}[/{color}]", end='')
            time.sleep(delay)
        console.print()
        
    def _show_welcome(self):
        console.clear()
        console.print("\n")
        
        ascii_art = self._generate_ascii_art("MASH")
        console.print(Panel(ascii_art, style="bold magenta"))
        
        welcome_text = "Welcome to Oh My Mash! üöÄ"
        self._animate_text(welcome_text, "cyan")
        
        console.print("\n")
        
    def _show_theme_preview(self, theme_name):
        colors = self._get_theme_colors(theme_name)
        if not colors:
            return
            
        preview = Panel(
            f"[{colors['prompt']}]user@mash[/{colors['prompt']}] "
            f"[{colors['path']}]~/projects[/{colors['path']}] "
            f"[{colors['git']}]git:(main)[/{colors['git']}] "
            f"[{colors['success']}]‚úì[/{colors['success']}]",
            title=f"Theme: {theme_name}",
            border_style=colors['border']
        )
        console.print(preview)
        
    def _show_loading_animation(self):
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
            console=console
        ) as progress:
            task = progress.add_task("Loading theme...", total=100)
            for i in range(100):
                time.sleep(0.02)
                progress.update(task, advance=1)
                
    def _apply_theme(self, theme_name):
        colors = self._get_theme_colors(theme_name)
        if not colors:
            console.print(f"[red]Theme {theme_name} not found[/red]")
            return False
            
        self._show_loading_animation()
        self._save_current_theme(theme_name)
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã –∫ shell
        console.print(f"[green]Theme {theme_name} applied successfully![/green]")
        return True
        
    def _list_themes(self):
        themes = []
        for theme_file in self.themes_dir.glob("*.theme"):
            themes.append(theme_file.stem)
            
        table = Table(show_header=True, header_style="bold magenta")
        table.add_column("Theme")
        table.add_column("Status")
        
        for theme in themes:
            status = "[green]Active[/green]" if theme == self.current_theme else "[dim]Inactive[/dim]"
            table.add_row(theme, status)
            
        console.print(table)
        
    def _show_help(self):
        help_text = """
[bold cyan]Oh My Mash Commands[/bold cyan]

  [bold]omm theme <name>[/bold]    - Apply a theme
  [bold]omm list[/bold]           - List available themes
  [bold]omm preview <name>[/bold] - Preview a theme
  [bold]omm update[/bold]         - Update Oh My Mash
  [bold]omm help[/bold]           - Show this help message
"""
        console.print(Panel(help_text, title="Oh My Mash Help", border_style="cyan"))
        
    def run(self):
        if len(sys.argv) < 2:
            self._show_welcome()
            self._show_help()
            return 0
            
        command = sys.argv[1]
        
        if command == 'theme':
            if len(sys.argv) < 3:
                console.print("[red]Theme name required[/red]")
                return 1
            theme_name = sys.argv[2]
            return 0 if self._apply_theme(theme_name) else 1
        elif command == 'list':
            self._list_themes()
            return 0
        elif command == 'preview':
            if len(sys.argv) < 3:
                console.print("[red]Theme name required[/red]")
                return 1
            theme_name = sys.argv[2]
            self._show_theme_preview(theme_name)
            return 0
        elif command == 'update':
            with Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                BarColumn(),
                TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
                console=console
            ) as progress:
                task = progress.add_task("Updating Oh My Mash...", total=100)
                for i in range(100):
                    time.sleep(0.02)
                    progress.update(task, advance=1)
            console.print("[green]Oh My Mash updated successfully![/green]")
            return 0
        elif command == 'help':
            self._show_help()
            return 0
        else:
            console.print(f"[red]Unknown command: {command}[/red]")
            return 1

if __name__ == "__main__":
    omm = OhMyMash()
    sys.exit(omm.run()) 