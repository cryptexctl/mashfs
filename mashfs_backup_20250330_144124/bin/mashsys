#!/usr/bin/env python3
import os
import sys
import json
import time
import shutil
import subprocess
import tempfile
from pathlib import Path
from datetime import datetime

VERSION = "1.0.2-alpha"
REPO_URL = "https://github.com/cryptexctl/mashfs.git"
DEFAULT_BRANCHES = ["main", "stable", "beta", "dev", "experimental"]

def main():
    root = Path(os.environ.get('MASHFS_ROOT', 'filesfs')).absolute()
    current_dir = Path(os.environ.get('MASHFS_CWD', root)).absolute()
    
    if len(sys.argv) < 2:
        show_help()
        return
    
    command = sys.argv[1]
    args = sys.argv[2:]
    
    if command == "version":
        show_version()
    elif command == "upgrade":
        upgrade_system(args, root)
    elif command == "switch":
        switch_branch_or_release(args, root)
    elif command == "list":
        list_branches_or_releases(args)
    elif command == "rollback":
        rollback_system(args, root)
    elif command == "status":
        show_status(root)
    elif command == "help":
        show_help()
    else:
        print(f"Неизвестная команда: {command}")
        print("Используйте 'mashsys help' для просмотра доступных команд")

def show_version():
    version_file = get_version_file()
    if version_file.exists():
        with open(version_file, 'r') as f:
            data = json.load(f)
            print(f"MashFS System Manager версия {data.get('version', VERSION)}")
            print(f"Текущая версия системы: {data.get('version', VERSION)}")
            print(f"Текущая ветка: {data.get('branch', 'main')}")
    else:
        print(f"MashFS System Manager версия {VERSION}")
        print(f"Текущая версия системы: {VERSION}")
        print(f"Текущая ветка: main")

def get_version_file():
    root = Path(os.environ.get('MASHFS_ROOT', 'filesfs')).absolute()
    return root / 'etc' / 'mashfs_version.json'

def save_version_info(version, branch, root):
    version_file = root / 'etc' / 'mashfs_version.json'
    version_file.parent.mkdir(exist_ok=True)
    
    data = {
        'version': version,
        'branch': branch,
        'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    with open(version_file, 'w') as f:
        json.dump(data, f, indent=2)

def run_command(cmd, cwd=None):
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True, cwd=cwd)
        return True, result.stdout.strip()
    except subprocess.CalledProcessError as e:
        return False, e.stderr.strip()
    except Exception as e:
        return False, str(e)

def check_git_installed():
    success, output = run_command(['git', '--version'])
    return success

def check_github_accessible():
    success, output = run_command(['ping', '-c', '1', 'github.com'])
    return success

def get_remote_branches():
    """Получает список веток из удаленного репозитория"""
    with tempfile.TemporaryDirectory() as temp_dir:
        # Инициализируем Git репозиторий и добавляем remote
        success, _ = run_command(['git', 'init'], cwd=temp_dir)
        if not success:
            return DEFAULT_BRANCHES
            
        success, _ = run_command(['git', 'remote', 'add', 'origin', REPO_URL], cwd=temp_dir)
        if not success:
            return DEFAULT_BRANCHES
            
        # Получаем информацию о ветках
        success, output = run_command(['git', 'ls-remote', '--heads', 'origin'], cwd=temp_dir)
        if not success:
            return DEFAULT_BRANCHES
            
        branches = []
        for line in output.split('\n'):
            if not line.strip():
                continue
                
            # Формат: <SHA>\trefs/heads/<branch_name>
            parts = line.split('\t')
            if len(parts) != 2:
                continue
                
            ref = parts[1]
            if ref.startswith('refs/heads/'):
                branch = ref[len('refs/heads/'):]
                branches.append(branch)
                
        return branches if branches else DEFAULT_BRANCHES

def get_remote_tags():
    """Получает список тегов из удаленного репозитория"""
    with tempfile.TemporaryDirectory() as temp_dir:
        # Инициализируем Git репозиторий и добавляем remote
        success, _ = run_command(['git', 'init'], cwd=temp_dir)
        if not success:
            return []
            
        success, _ = run_command(['git', 'remote', 'add', 'origin', REPO_URL], cwd=temp_dir)
        if not success:
            return []
            
        # Получаем информацию о тегах
        success, output = run_command(['git', 'ls-remote', '--tags', 'origin'], cwd=temp_dir)
        if not success:
            return []
            
        tags = []
        for line in output.split('\n'):
            if not line.strip():
                continue
                
            # Формат: <SHA>\trefs/tags/<tag_name>
            parts = line.split('\t')
            if len(parts) != 2:
                continue
                
            ref = parts[1]
            if ref.startswith('refs/tags/'):
                tag = ref[len('refs/tags/'):]
                # Исключаем аннотированные теги (^{})
                if not tag.endswith('^{}'):
                    tags.append(tag)
                
        return tags

def clone_repo(temp_dir, branch='main'):
    success, output = run_command(['git', 'clone', '-b', branch, '--depth', '1', REPO_URL, 'repo'], cwd=temp_dir)
    
    if not success:
        print(f"Ошибка при клонировании репозитория: {output}")
        return False
        
    return True

def upgrade_system(args, root):
    force = "--force" in args
    if force:
        args = [arg for arg in args if arg != "--force"]
    
    target_version = None
    target_branch = "main"  # По умолчанию используем main
    
    if args:
        # Проверим, похож ли аргумент на версию или ветку
        if args[0].count('.') >= 1 or '-' in args[0]:
            target_version = args[0]
        else:
            target_branch = args[0]
    
    # Проверка наличия git
    if not check_git_installed():
        print("Ошибка: Git не установлен. Установите Git для обновления системы.")
        return
    
    # Проверка доступности GitHub
    if not check_github_accessible():
        print("Ошибка: GitHub недоступен. Проверьте подключение к интернету.")
        return
    
    print(f"Обновление MashFS...")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        # Если указана версия, используем tags, иначе ветку
        if target_version:
            print(f"Проверка версии {target_version}...")
            tags = get_remote_tags()
            if target_version not in tags:
                print(f"Ошибка: Версия {target_version} не найдена в репозитории")
                print("Доступные версии:")
                for tag in tags[:10]:  # Показываем только первые 10
                    print(f"  {tag}")
                if len(tags) > 10:
                    print(f"  ... и еще {len(tags) - 10}")
                return
                
            # Клонирование репозитория с указанным тегом
            print(f"Клонирование версии {target_version}...")
            success, _ = run_command(['git', 'init'], cwd=temp_dir)
            if not success:
                print("Ошибка при инициализации Git")
                return
                
            success, _ = run_command(['git', 'remote', 'add', 'origin', REPO_URL], cwd=temp_dir)
            if not success:
                print("Ошибка при добавлении удаленного репозитория")
                return
                
            success, _ = run_command(['git', 'fetch', '--depth', '1', 'origin', 'tag', target_version], cwd=temp_dir)
            if not success:
                print(f"Ошибка при загрузке версии {target_version}")
                return
                
            success, _ = run_command(['git', 'checkout', 'FETCH_HEAD'], cwd=temp_dir)
            if not success:
                print(f"Ошибка при переключении на версию {target_version}")
                return
                
            repo_dir = Path(temp_dir)
        else:
            # Клонирование репозитория с указанной веткой
            print(f"Проверка ветки {target_branch}...")
            branches = get_remote_branches()
            if target_branch not in branches:
                print(f"Ошибка: Ветка {target_branch} не найдена в репозитории")
                print("Доступные ветки:")
                for branch in branches:
                    print(f"  {branch}")
                return
                
            print(f"Клонирование ветки {target_branch}...")
            if not clone_repo(temp_dir, target_branch):
                return
                
            repo_dir = Path(temp_dir) / 'repo'
        
        # Проверка структуры репозитория
        if not (repo_dir / 'filesfs').exists():
            print("Ошибка: Некорректная структура репозитория (не найдена директория filesfs)")
            return
            
        if not (repo_dir / 'chrootmash.py').exists():
            print("Ошибка: Некорректная структура репозитория (не найден файл chrootmash.py)")
            print("Вы можете использовать --force для принудительного обновления")
            if not force:
                return
        
        # Резервное копирование перед обновлением
        backup_dir = root.parent / f"mashfs_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        print(f"Создание резервной копии в {backup_dir}...")
        shutil.copytree(root, backup_dir, symlinks=True)
        
        # Копирование файлов из репозитория
        print("Обновление файлов...")
        
        # Сохраняем важные конфигурационные файлы
        config_files = {}
        for config in ['shadow', 'passwd', 'theme.yml', '.bashrc', '.zshrc', '.mashrc']:
            config_path = root / 'etc' / config
            if config_path.exists():
                with open(config_path, 'r') as f:
                    config_files[config] = f.read()
                    
        # Также сохраняем конфиги пользователей
        for user_dir in (root / 'home').glob('*'):
            if user_dir.is_dir():
                for config in ['.bashrc', '.zshrc', '.mashrc']:
                    config_path = user_dir / config
                    if config_path.exists():
                        with open(config_path, 'r') as f:
                            rel_path = config_path.relative_to(root)
                            config_files[str(rel_path)] = f.read()
        
        # Сохраняем информацию о символических ссылках
        symlinks = {}
        for src_path in root.glob('**/*'):
            if src_path.is_symlink():
                rel_path = src_path.relative_to(root)
                symlinks[str(rel_path)] = os.readlink(src_path)
        
        # Синхронизация файлов
        total_files = 0
        updated_files = 0
        
        for src_path in repo_dir.glob('filesfs/**/*'):
            if src_path.is_file():
                rel_path = src_path.relative_to(repo_dir / 'filesfs')
                dest_path = root / rel_path
                
                dest_path.parent.mkdir(parents=True, exist_ok=True)
                
                # Не перезаписываем некоторые конфигурационные файлы
                if (rel_path.parts[0] == 'etc' and rel_path.name in config_files) or str(rel_path) in config_files:
                    continue
                
                # Проверяем, является ли целевой файл символической ссылкой
                if dest_path.is_symlink():
                    # Удаляем символическую ссылку перед копированием
                    dest_path.unlink()
                
                try:
                    # Копируем файл
                    shutil.copy2(src_path, dest_path)
                    updated_files += 1
                except shutil.SameFileError:
                    # Игнорируем ошибку, если файл тот же
                    print(f"\nПропуск идентичного файла: {dest_path}")
                except Exception as e:
                    print(f"\nОшибка при копировании {src_path} в {dest_path}: {e}")
                
                total_files += 1
                # Показываем прогресс каждые 10 файлов
                if total_files % 10 == 0:
                    print(f"\rОбработано файлов: {total_files}", end='')
        
        # Восстанавливаем символические ссылки
        for rel_path, target in symlinks.items():
            # Если файл не был перезаписан в процессе обновления, воссоздаем симлинк
            link_path = root / rel_path
            if link_path.exists() and not link_path.is_symlink():
                link_path.unlink()
            
            if not link_path.exists():
                # Создаем директории, если нужно
                link_path.parent.mkdir(parents=True, exist_ok=True)
                # Создаем символическую ссылку
                os.symlink(target, link_path)
                print(f"\nВосстановлена символическая ссылка: {rel_path} -> {target}")
        
        # Копирование основных файлов
        for file in ['chrootmash.py', 'package_manager.py']:
            src_file = repo_dir / file
            if src_file.exists():
                dest_file = root.parent / file
                if dest_file.is_symlink():
                    dest_file.unlink()
                
                try:
                    shutil.copy2(src_file, dest_file)
                    updated_files += 1
                except shutil.SameFileError:
                    print(f"\nПропуск идентичного файла: {dest_file}")
                except Exception as e:
                    print(f"\nОшибка при копировании {src_file} в {dest_file}: {e}")
        
        # Восстанавливаем конфигурационные файлы
        for config_path, content in config_files.items():
            if '/' in config_path:
                # Это относительный путь
                dest_path = root / config_path
            else:
                # Это файл в /etc
                dest_path = root / 'etc' / config_path
                
            dest_path.parent.mkdir(parents=True, exist_ok=True)
            with open(dest_path, 'w') as f:
                f.write(content)
        
        # Обновляем права на исполнение файлов
        print("\nОбновление прав доступа...")
        for bin_file in (root / 'bin').glob('*'):
            if bin_file.is_file() and not bin_file.is_symlink():
                bin_file.chmod(0o755)  # Устанавливаем права на исполнение
        
        # Обновляем chrootmash.py и основные скрипты
        for script in [(root.parent / 'chrootmash.py'), (root.parent / 'package_manager.py')]:
            if script.exists() and not script.is_symlink():
                script.chmod(0o755)
        
        # Получаем информацию о версии
        version = target_version or "1.0.0"  # По умолчанию или указанная версия
        try:
            if (repo_dir / 'VERSION').exists():
                with open(repo_dir / 'VERSION', 'r') as f:
                    version = f.read().strip()
            elif (repo_dir / 'version.txt').exists():
                with open(repo_dir / 'version.txt', 'r') as f:
                    version = f.read().strip()
        except:
            pass
            
        # Сохраняем информацию о версии
        save_version_info(version, target_branch, root)
        
        print(f"\nОбновление завершено! Обновлено файлов: {updated_files}")
        print(f"Система обновлена до версии {version}" + (f" (ветка {target_branch})" if not target_version else ""))
        print(f"Резервная копия сохранена в {backup_dir}")

def switch_branch_or_release(args, root):
    if not args:
        print("Необходимо указать ветку или версию")
        print("Использование: mashsys switch <branch/version>")
        return
    
    target = args[0]
    
    # Проверяем наличие git
    if not check_git_installed():
        print("Ошибка: Git не установлен. Установите Git для обновления системы.")
        return
        
    # Проверяем доступность GitHub
    if not check_github_accessible():
        print("Ошибка: GitHub недоступен. Проверьте подключение к интернету.")
        return
    
    # Получаем доступные ветки и теги
    branches = get_remote_branches()
    tags = get_remote_tags()
    
    if target in branches:
        print(f"Переключение на ветку '{target}'...")
        upgrade_system([target], root)
        return
    
    if target in tags:
        print(f"Переключение на версию {target}...")
        upgrade_system([target], root)
        return
    
    print(f"Ошибка: Ветка или версия '{target}' не найдена")
    print("Доступные ветки:")
    for branch in branches:
        print(f"  {branch}")
    print("\nДоступные версии:")
    for tag in tags[:5]:  # Показываем только первые 5
        print(f"  {tag}")
    if len(tags) > 5:
        print(f"  ... и еще {len(tags) - 5}")

def list_branches_or_releases(args):
    # Проверяем наличие git
    if not check_git_installed():
        print("Ошибка: Git не установлен. Установите Git для получения списка веток и релизов.")
        return
        
    # Проверяем доступность GitHub
    if not check_github_accessible():
        print("Ошибка: GitHub недоступен. Проверьте подключение к интернету.")
        return
    
    if not args or args[0] == "branches":
        branches = get_remote_branches()
        print("Доступные ветки:")
        for branch in branches:
            print(f"  {branch}")
    elif args[0] == "releases" or args[0] == "tags":
        tags = get_remote_tags()
        print("Доступные версии:")
        for tag in tags:
            print(f"  {tag}")
    else:
        print(f"Неизвестный параметр: {args[0]}")
        print("Использование: mashsys list [branches|releases|tags]")

def rollback_system(args, root):
    # Найти последнюю резервную копию
    backups = list(root.parent.glob("mashfs_backup_*"))
    if not backups:
        print("Резервные копии не найдены")
        return
    
    # Сортируем по дате (по имени папки)
    backups.sort(reverse=True)
    
    if args and args[0] != "latest":
        # Ищем конкретную резервную копию
        backup_idx = -1
        try:
            backup_idx = int(args[0]) - 1
            if backup_idx < 0 or backup_idx >= len(backups):
                raise ValueError()
        except ValueError:
            print(f"Ошибка: Неверный индекс резервной копии")
            print("Доступные резервные копии:")
            for i, backup in enumerate(backups):
                backup_date = backup.name.replace("mashfs_backup_", "").replace("_", " ").replace(".tar.gz", "")
                print(f"  {i+1}. {backup_date}")
            return
        
        backup_path = backups[backup_idx]
    else:
        backup_path = backups[0]
    
    backup_date = backup_path.name.replace("mashfs_backup_", "")
    print(f"Восстановление из резервной копии от {backup_date}...")
    
    # Создаем резервную копию текущего состояния перед откатом
    current_backup = root.parent / f"mashfs_pre_rollback_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    shutil.copytree(root, current_backup)
    
    # Удаление текущей директории
    shutil.rmtree(root)
    
    # Копирование из резервной копии
    shutil.copytree(backup_path, root)
    
    print(f"Система успешно восстановлена из резервной копии от {backup_date}")
    print(f"Предыдущее состояние сохранено в {current_backup}")

def show_status(root):
    version_file = get_version_file()
    version = VERSION
    branch = "main"
    last_update = "Неизвестно"
    
    if version_file.exists():
        try:
            with open(version_file, 'r') as f:
                data = json.load(f)
                version = data.get('version', VERSION)
                branch = data.get('branch', 'main')
                last_update = data.get('last_update', 'Неизвестно')
        except:
            pass
    
    print("Статус системы MashFS:")
    print(f"  Текущая версия: {version}")
    print(f"  Текущая ветка: {branch}")
    print(f"  Последнее обновление: {last_update}")
    
    # Проверка резервных копий
    backups = list(root.parent.glob("mashfs_backup_*"))
    if backups:
        backups.sort(reverse=True)
        print("\nРезервные копии:")
        for i, backup in enumerate(backups[:3]):  # Показываем только последние 3
            backup_date = backup.name.replace("mashfs_backup_", "").replace("_", " ")
            print(f"  {i+1}. {backup_date}")
        
        if len(backups) > 3:
            print(f"  ... и еще {len(backups) - 3} резервных копий")
            
    # Проверяем доступные обновления, если Git и GitHub доступны
    if check_git_installed() and check_github_accessible():
        print("\nПроверка обновлений...")
        branches = get_remote_branches()
        if branch in branches:
            print(f"  Текущая ветка ({branch}) доступна в репозитории")
        else:
            print(f"  Текущая ветка ({branch}) не найдена в репозитории")
            
        latest_tag = None
        tags = get_remote_tags()
        if tags:
            tags.sort(reverse=True)
            latest_tag = tags[0]
            
        if latest_tag and latest_tag != version:
            print(f"  Доступна новая версия: {latest_tag}")
            print(f"  Для обновления выполните: mashsys upgrade {latest_tag}")

def show_help():
    print("Использование: mashsys <команда> [параметры]")
    print("\nДоступные команды:")
    print("  version      - показать текущую версию")
    print("  upgrade      - обновить систему до последней версии")
    print("  switch       - переключиться на другую ветку или версию")
    print("  list         - показать доступные ветки и релизы")
    print("  rollback     - откатиться к резервной копии")
    print("  status       - показать текущий статус системы")
    print("  help         - показать эту справку")
    print("\nПримеры:")
    print("  mashsys upgrade               - обновить до последней версии main")
    print("  mashsys upgrade beta          - обновить до последней версии ветки beta")
    print("  mashsys upgrade v1.0.0        - обновить до конкретной версии")
    print("  mashsys upgrade --force       - принудительное обновление")
    print("  mashsys switch beta           - переключиться на ветку beta")
    print("  mashsys list branches         - показать доступные ветки")
    print("  mashsys list releases         - показать доступные релизы")
    print("  mashsys rollback              - откатиться к последней резервной копии")
    print("  mashsys rollback 2            - откатиться к конкретной резервной копии")

if __name__ == "__main__":
    main() 
