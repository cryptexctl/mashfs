#!/usr/bin/env python3
import os
import sys
import getpass
from pathlib import Path
import subprocess

def authenticate(root, username, password):
    shadow_file = root / 'etc' / 'shadow'
    if not shadow_file.exists():
        return False
        
    try:
        with open(shadow_file) as f:
            for line in f:
                if line.startswith(f"{username}:"):
                    stored_hash = line.split(':')[1].strip()
                    return password == stored_hash
        return False
    except Exception:
        return False

def is_in_sudoers(root, username):
    sudoers_file = root / 'etc' / 'sudoers'
    if not sudoers_file.exists():
        return True
        
    try:
        with open(sudoers_file) as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    if line == 'ALL ALL=(ALL) ALL' or line == f'{username} ALL=(ALL) ALL':
                        return True
        return False
    except Exception:
        return False

def main():
    if len(sys.argv) < 2:
        print("Usage: sudo <command> [args...]")
        sys.exit(1)
        
    current_user = os.environ.get('USER', 'mash')
    root = Path(os.environ.get('MASHFS_ROOT', 'filesfs')).absolute()
    
    if not is_in_sudoers(root, current_user):
        print(f"sudo: {current_user} is not in the sudoers file. This incident will be reported.")
        sys.exit(1)
    
    if current_user != 'root':
        password = getpass.getpass(f"[sudo] password for {current_user}: ")
        if not authenticate(root, current_user, password):
            print("sudo: Authentication failed")
            sys.exit(1)
    
    cmd = sys.argv[1]
    cmd_args = sys.argv[2:] if len(sys.argv) > 2 else []
    
    bin_path = root / 'bin' / cmd
    if not bin_path.exists():
        print(f"sudo: {cmd}: command not found")
        sys.exit(1)
    
    original_user = os.environ.get('USER')
    
    try:
        os.environ['USER'] = 'root'
        os.environ['SUDO_USER'] = original_user
        
        cmd_str = f"python {bin_path} {' '.join(cmd_args)}"
        exit_code = os.system(cmd_str)
        
        os.environ['USER'] = original_user
        if 'SUDO_USER' in os.environ:
            del os.environ['SUDO_USER']
            
        return exit_code >> 8
    except Exception as e:
        print(f"sudo: error executing {cmd}: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())